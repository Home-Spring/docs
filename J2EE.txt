
В компьютере абсолютно все его блоки являются устройствами.
Например: и "математический процессор" (физическое устройство) и "графическая видеокарта" (физическое устройство) и "устройство жестких дисков" (физическое устройство) и "программные инструкции" (виртуальное устройство)...
Каждое из этих устройств имеет своюй адресс в оперативной памяти по которому можно обращаться к этому устройству.
Все устройства обмениваются между собой данными с помощью сообщений.
Только в одном случае если эти сообщения (данные) были отправлены по адрессу "графической видеокарты" - тогда компьютер будет рисовать картинку..., а в другом случае если сообщения (данные) были отправлены по адрессу 
"математического процессора" - тогда компьтер будет выполнять вычисления..., а в третьем случае если сообщения (данные) были отправлены по адрессу "программных инструкций" - тогда компьютер будет определять следующе  действие...

В таком же порядке работает и "Операционная Система":
- она имеет в своем распоряжении какие-то физические устройства - (блоки-железо)...
- а также виртуальные устройства - (сама программа Операционной Системы - ее программные инструкции)...
При запуске компьютера автоматически запускаются/загружаются такие виртуальные устройства как например: "Операционная Система (обработчик)", "клиентская консоль (фрейм действий)"...
Они обмениваются данными между собой с помощью сообщений по определенному адрессу (именно таким способом компьютер определяет какое действие нужно выполнить с этим типом данных).


http://xiper.net/learn/also-need-to-know/how-does-a-browser-communicate-with-the-server
http://www.xiper.net/learn/also-need-to-know/how-does-a-browser-HTTP-request.html
http://habrahabr.ru/post/50147/
https://htmlweb.ru/other/http_protocol.php
http://www.lib.ru/WEBMASTER/rfc2068/section-4.html
------------------------------------------------------------------------------------------------------------------------------------------------
По своей сути структура ВЕБ-Приложения имеет похожую архитектуру как в случае с Операционной Системой:
- сервер приложений (программная инструкция) находится на стороне сервера и имеет свой адресс (IP + порт).
- клиент (фрейм действий - веб-браузер) находится на стороне клиента и имеет свой адресс (IP + стандартный порт).
-- "html-файл" "css-файл" "jpeg-файл" "javascript-файл"... представляют собой данные которые должны адресоваться и обрабатываться на только стороне клиента
-- "php-файл" "java-файл" "pyton-файл" "ruby-файл"... представляют собой данные которые должны адресоваться и обрабатываться на только стороне сервера приложений

https://ru.wikipedia.org/wiki/URI
------------------------------------------------------------------------------------------------------------------------------------------------[ URI (Uniform Resource Identifier- унифицированный идентификатор ресурса) ]
http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html
(Урок 2. Отправка заголовка HEAD в PHP) http://phpblog.su/php-uroven-2/zapros-head-v-php/
(Http заголовки (Http headers). Общая теория) http://scriptsite.ru/article/show/5/
(Пример работы с протоколом HTTP в Java (java.net.*)) http://juravskiy.ru/?p=585
(Http в Java. Часть вторая - HTTP) http://www.dokwork.ru/2012/02/http-java-http.html


http://www.xiper.net/learn/also-need-to-know/how-does-a-browser-HTTP-request.html
http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html
http://phpblog.su/php-uroven-2/zapros-head-v-php/
http://habrahabr.ru/post/215117/
http://scriptsite.ru/article/show/5/
http://juravskiy.ru/?p=585
http://www.dokwork.ru/2012/02/http-java-http.html
http://phpmove.ru/page/http-header
http://citforum.ck.ua/internet/cgi_tut/rqst.shtml
https://ru.wikipedia.org/wiki/HTTP
https://ru.wikipedia.org/wiki/URI
http://habrahabr.ru/post/239299/
================================================================================================================================================
Итак, обмен данными!
Понятно что в компьютере существует много разных устройств и поэтому единого стандарта для всех устройств на структуру данных нет и быть неможет (поскольку устройства все разные, выполняют разные задачи и работают с разными данными).
По сути программа, что отправляет сообщения физическому устройству, представляет собой клиентский интерфейс который собирает клиентские данные (с какой нибудь формы) и отправляет эти данные по адрессу этого физического устройства.
Но для того чтобы сформировать данные в определеную структуру которая будет понятна для этого физического устройства - существует так называемый драйвер (это такая себе функция которая формирует данные по каким-то правилам...).

Протоколы обмена данными!
Существуют разные уровни доступа сообщений для обмена данными:
- локальный (к файлам на уровне файловой системы внутри компютера: жесткий диск, интегрированая видеокарта, матеиатический процессор, ...)
- сокеты (это могут быть уже внешние локальные мультимедийные устройства: принтер, внешний дисковод, флешка, ...)
- сетевой (между разными компьютерами, здесь тоже есть свои подуровни):
  - сетевой-ssh (позволяет работать удалено на консольном уровне...)
  - сетевой-mail (используется сервисами-программами для отправки коротких текстовых сообщений...)
  - сетевой-ftp (для загрузки/выгрузки файлов)
  - сетевой-http (для передачи свободных данных...)
  - сетевой-https (для передачи свободных данных... в защищенном/зашифрованом режиме)
  - сетевой-rtmfp (для передачи видеопотоков...)
  - сетевой-wifi (для передачи свободных данных по беспроводной сети...)
  - сетевой-wap (для передачи свободных данных по беспроводной сети... но он ограничен пропусным каналом связи)
------------------------------------------------------------------------
Вообще сети существуют разные:
- проводные коаксиальные (только локальные)
- проводные витая пара (локальные, глобальные)
- проводные оптоволоконные (только глобальные)
- беспроводные WI-FI (локальные)
- беспроводные GPRS (для сотовой сети глобальные 'wap')

по сути уровни доступа обмена сообщениями это выделаная область внутри оперативной памяти.
- сетевой (между разными компьютерами, здесь тоже есть свои подуровни):
  - сетевой-ssh (для удаленного администрирования, ограничен только совместимыми типами Операционных Систем - работает с удаленным рабочим столом...)
  - сетевой-ftp (для выполнения клиентских задач по загрузке/выгрузке файлов, работает на разных типах Операционных Систем...)
  - сетевой-http (используется только для приложений и работает на разных типах Операционных Систем - можно выполнять все включая административны операции...)
  - сетевой-https (тоже что и 'http' только работает в защищенном/зашифрованом режиме)
  - сетевой-mail (используется сервисами-программами для отправки коротких текстовых сообщений...)

Дело в том, что приложения по сетевому протоколу-http имеют доступ для выполнения любой задачи, вплоть даже до удаления системы и данных...
Поэтому была идея классифицировать уровни задач:
- одни задачи могут просто просматривать данные
- другие задачи могут редактировать данные
- третьи задачи могут создавать данные
- четвертые задачи могут удалять данные
...
И такие уровни разделяются типами запросов: GET, PUT, POST, DELETE, ...

REST-запросы это форма представления запроса в адрессной строке, которая позволяет четко понимать его назначение (для поиска списка данных, получения описания, на создание/редактирование/удаление)...

Корпоративное клиент-серверное приложение состоит из слоев:
- клиентский слой:
-- представление информации
-- возможность выполнять запросы на сервер
-- кеширование данных (для увеличения скорости обработки ответа-данных...)
- серверный слой:
-- сессии (сохранения клиентских данных которые транспортируются между клиентским и серверным приложением, на случай непредвиденного обрыва по сети)
-- роли доступа (разограничение прав доступа: поскольку на разных уровнях над информацией работают-обрабатываю разные специалисты)

Плагин - это очень полезный компонент приложения.
Все современные приложения позволяют настраивать собственный интерфейс.
А также современные приложения могут собираться из компонентов, как конструктор.
Поэтому чтобы не создавать каждый раз новую версию для всего приложения существуют отдельные встраиваемые компоненты - плагины (которые работают интерактивно внутри приложения) они представляют собой виджет + собственный обработчик...

Что  такое кластеры - это настроеные несколько серверов приложений так чтобы они работали в паре.
Основная задача такой схемы чтобы балансировать/распределять нагрузку на между этими серверами...
------------------------------------------------------------------------

   Зачем нужны такие разные уровни доступа сообщений для обмена данными - прежде всего когда сообщения покидают и выходят за пределы локального компьютера, здесь возникает проблема которая связана с совместимостью между устройствами...
потому-что это уже не являются локальными устройствами и они также требуют специальной настройки (разрядность, скорость, размер)...

"Операционая Система" всегда работает только на локальном компьютере и с локальными устройствами (поэтому обычно она имеет в своей системной библиотеке все необходимые драйввера для конфигурирования и настройки локальных устройств...).
(по сути "Операционая Система" является таким-же сервером приложений)
Сообщения которые (клиентская программа) консоль/терминал отправляет по адрессу "Операционной Системы" имеют свою структуру:
1. путь к локальному файлу/программе которая будет выполнять конкретную команду
2. специальные ключи которые помогают тонко настроить выполнение команды/программы
3. и клиентские данные, которые нужно обрабатывать
А результатом обработки и выполнения тела такого сообщения (команды) может быть например: печать на принтер, отрисовка в клиентской области, ...

Что же касается сообщений для обмена по сетевому протоколу - здесь существуют свои стандарты:
1. они работаю в режиме: озапрос-ответ
2. в теле запроса присутствует: заголовок, который сообщить серверу информацию о своей конфигурации и данные о форматах документов, которые он может принимать
3. в теле ответа присутствует:
   - код состояния
   - информация о сервере и передаваемых данных
   - и сами данные
По сути, веб-браузер напоминает клиентскую консоль (кстати даже клиентская консоль тоже имеет специальный драйвер который формирует структуру данных/сообщения для Операционной Системы).
Результатом работы сервера (обработки и выполнения тела такого сообщения) есть данные в клиентском поле веб-браузера.
(драйвер - это локальный файл для установки нужной конфигурации и может работать только на уровне Операционной Системы...)
Поскольку на сетевом уровне драйвера отсутствуют (если это не есть настройка железа...), здесь вместо драйвером используются заголовки зпрососов - мета-данные (которые позволяют удаленно передать конфигурацию...).

------------------------------------------------------------------------------------------------------------------------------------------------
Локальная программа на компьютере обычно используется одним пользователем и настраивается тоже этим пользователем. И вообще время работы для локальной программы тоже контролируется этим пользователем.

Веб-приложение (от локальной программы) отличается тем, что:
- с ним работают моного пользователей (клиентов... - )
- такое веб-приложение имеет клиентскую и серверную сторону и ни клиент и ни сервер не может синхронно контролировать время их совместной работы (поэтому данные могут потреряться... - сессии)
- организация ролевого доступа (потому-что много людей участвуют в формировании информации на разных уровнях... - ролевая политика)
По сути структура веб-приложения похожая на локальную программу:
- есть обработчик (на сервере приложений)
- есть клиентское окно/фрейм (клиентский документ в веб-браузере)
- есть обмен сообщениями (через http-протокол)

Теги в html-документе это теже самые экшены (макро-команды) которые выполняют какие-то действия...
Например тег "<FORM>" формирует простой заголовой для выполнения зпроса на сервер приложений.













/home/alexandr/Изображения/jenkins/(New) Roles.txt
/home/alexandr/Рабочий стол/linux-admin_coomand.txt
/home/alexandr/JenkinsProjects/jenkins-signup-spring2/Hibernate/persistence.txt
/home/alexandr/JenkinsProjects/jenkins-signup-spring2/Hibernate/hibernate.txt
/home/alexandr/JenkinsProjects/jenkins-signup-spring3/Spring/ссылки-1.txt
/home/alexandr/JenkinsProjects/jenkins-signup-spring3/Spring/ссылки-2.txt
/home/alexandr/JenkinsProjects/jenkins-signup-spring3/Spring/spring-1.txt
/home/alexandr/JenkinsProjects/jenkins-signup-spring3/Spring/spring-2.txt
/home/alexandr/JenkinsProjects/jenkins-signup-spring3/Spring/SECURITY/AngularJSSpringMVC.txt
/home/alexandr/IdeaProjects/worked/Lessons/src/Docs.txt
/home/alexandr/IdeaProjects/worked/Lessons/src/Docs2.txt
/home/alexandr/IdeaProjects/worked/Lessons/src/Docs3.txt
/home/alexandr/IdeaProjects/worked/Lessons/src/_Docs.txt
/home/alexandr/IdeaProjects/worked/Lessons/src/_Docs2.txt






 
